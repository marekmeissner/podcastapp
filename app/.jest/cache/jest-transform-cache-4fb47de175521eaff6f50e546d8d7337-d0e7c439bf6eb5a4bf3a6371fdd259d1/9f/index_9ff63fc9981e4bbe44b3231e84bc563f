45b85e5c72f56ae0afbdc9008aee0c4c
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.parseUpdateArgs = exports.mergeFieldPathData = void 0;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _FieldPath = _interopRequireDefault(require("../FieldPath"));
var _utils = require("../../../utils");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

var buildFieldPathData = function buildFieldPathData(segments, value) {
  if (segments.length === 1) {
    return (0, _defineProperty2.default)({},
    segments[0], value);

  }

  return (0, _defineProperty2.default)({},
  segments[0], buildFieldPathData(segments.slice(1), value));

};


var mergeFieldPathData = function mergeFieldPathData(data, segments, value) {
  if (segments.length === 1) {
    return _objectSpread({}, data, (0, _defineProperty2.default)({},
    segments[0], value));

  }

  if (data[segments[0]]) {
    return _objectSpread({}, data, (0, _defineProperty2.default)({},
    segments[0], mergeFieldPathData(data[segments[0]], segments.slice(1), value)));

  }

  return _objectSpread({}, data, (0, _defineProperty2.default)({},
  segments[0], buildFieldPathData(segments.slice(1), value)));

};exports.mergeFieldPathData = mergeFieldPathData;
var parseUpdateArgs = function parseUpdateArgs(args, methodName) {
  var data = {};

  if (args.length === 1) {
    if (!(0, _utils.isObject)(args[0])) {
      throw new Error(methodName + " failed: If using a single update argument, it must be an object.");
    }var _args = (0, _slicedToArray2.default)(

    args, 1);data = _args[0];
  } else if (args.length % 2 === 1) {
    throw new Error(methodName + " failed: The update arguments must be either a single object argument, or equal numbers of key/value pairs.");
  } else {
    for (var i = 0; i < args.length; i += 2) {
      var key = args[i];
      var value = args[i + 1];

      if ((0, _utils.isString)(key)) {
        data[key] = value;
      } else if (key instanceof _FieldPath.default) {
        data = mergeFieldPathData(data, key._segments, value);
      } else {
        throw new Error(methodName + " failed: Argument at index " + i + " must be a string or FieldPath");
      }
    }
  }

  return data;
};exports.parseUpdateArgs = parseUpdateArgs;