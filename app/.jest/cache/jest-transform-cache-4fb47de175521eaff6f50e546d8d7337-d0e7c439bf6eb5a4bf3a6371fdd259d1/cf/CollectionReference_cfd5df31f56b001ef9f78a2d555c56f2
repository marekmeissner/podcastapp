4072c0fc9d7d67ee72d3bb910dffc394
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));



var _Query = _interopRequireDefault(require("./Query"));
var _DocumentReference = _interopRequireDefault(require("./DocumentReference"));
var _utils = require("../../utils");var




CollectionReference = function () {
  function CollectionReference(firestore, collectionPath) {(0, _classCallCheck2.default)(this, CollectionReference);
    this._collectionPath = collectionPath;
    this._firestore = firestore;
    this._query = new _Query.default(firestore, collectionPath);
  }(0, _createClass2.default)(CollectionReference, [{ key: "isEqual", value: function isEqual(



















    otherCollectionReference) {
      if (!(otherCollectionReference instanceof CollectionReference)) {
        throw new Error('firebase.firestore.CollectionReference.isEqual(*) expects an instance of CollectionReference.');
      }


      if (this.path !== otherCollectionReference.path) return false;

      if (this._firestore.app.name !== otherCollectionReference._firestore.app.name) {
        return false;
      }



      if (this._firestore.app.options.projectId !== otherCollectionReference._firestore.app.options.projectId) {
        return false;
      }

      return true;
    } }, { key: "add", value: function add(

    data) {
      var documentRef = this.doc();
      return documentRef.set(data).then(function () {return Promise.resolve(documentRef);});
    } }, { key: "doc", value: function doc(

    documentPath) {
      var newPath = documentPath || (0, _utils.firestoreAutoId)();

      var path = this._collectionPath.child(newPath);

      if (!path.isDocument) {
        throw new Error('Argument "documentPath" must point to a document.');
      }

      return new _DocumentReference.default(this._firestore, path);
    } }, { key: "endAt", value: function endAt()


    {for (var _len = arguments.length, snapshotOrVarArgs = new Array(_len), _key = 0; _key < _len; _key++) {snapshotOrVarArgs[_key] = arguments[_key];}
      return this._query.endAt(snapshotOrVarArgs);
    } }, { key: "endBefore", value: function endBefore()

    {for (var _len2 = arguments.length, snapshotOrVarArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {snapshotOrVarArgs[_key2] = arguments[_key2];}
      return this._query.endBefore(snapshotOrVarArgs);
    } }, { key: "get", value: function get(

    options) {
      return this._query.get(options);
    } }, { key: "limit", value: function limit(

    _limit) {
      return this._query.limit(_limit);
    } }, { key: "onSnapshot", value: function onSnapshot(

    optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {
      return this._query.onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError);
    } }, { key: "orderBy", value: function orderBy(

    fieldPath, directionStr) {
      return this._query.orderBy(fieldPath, directionStr);
    } }, { key: "startAfter", value: function startAfter()

    {for (var _len3 = arguments.length, snapshotOrVarArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {snapshotOrVarArgs[_key3] = arguments[_key3];}
      return this._query.startAfter(snapshotOrVarArgs);
    } }, { key: "startAt", value: function startAt()

    {for (var _len4 = arguments.length, snapshotOrVarArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {snapshotOrVarArgs[_key4] = arguments[_key4];}
      return this._query.startAt(snapshotOrVarArgs);
    } }, { key: "where", value: function where(

    fieldPath, opStr, value) {
      return this._query.where(fieldPath, opStr, value);
    } }, { key: "firestore", get: function get() {return this._firestore;} }, { key: "id", get: function get() {return this._collectionPath.id;} }, { key: "parent", get: function get() {var parentPath = this._collectionPath.parent();return parentPath ? new _DocumentReference.default(this._firestore, parentPath) : null;} }, { key: "path", get: function get() {return this._collectionPath.relativeName;} }]);return CollectionReference;}();exports.default = CollectionReference;