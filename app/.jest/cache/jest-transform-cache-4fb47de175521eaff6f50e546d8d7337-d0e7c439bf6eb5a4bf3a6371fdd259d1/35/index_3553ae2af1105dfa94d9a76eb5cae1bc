3f06ad0d7bc262110f413bb62c3f95c9
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _ModuleBase = _interopRequireDefault(require("../../utils/ModuleBase"));
var _native = require("../../utils/native");
var _utils = require("../../utils");
var AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;
var ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];
var MODULE_NAME = 'RNFirebaseAnalytics';exports.MODULE_NAME = MODULE_NAME;
var NAMESPACE = 'analytics';exports.NAMESPACE = NAMESPACE;var
Analytics = function (_ModuleBase) {(0, _inherits2.default)(Analytics, _ModuleBase);
  function Analytics(app) {(0, _classCallCheck2.default)(this, Analytics);return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Analytics).call(this,
    app, {
      moduleName: MODULE_NAME,
      hasMultiAppSupport: false,
      hasCustomUrlSupport: false,
      namespace: NAMESPACE }));

  }(0, _createClass2.default)(Analytics, [{ key: "logEvent", value: function logEvent(








    name) {var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!(0, _utils.isString)(name)) {
        throw new Error("analytics.logEvent(): First argument 'name' is required and must be a string value.");
      }

      if (typeof params !== 'undefined' && !(0, _utils.isObject)(params)) {
        throw new Error("analytics.logEvent(): Second optional argument 'params' must be an object if provided.");
      }


      if (ReservedEventNames.includes(name)) {
        throw new Error("analytics.logEvent(): event name '" + name + "' is a reserved event name and can not be used.");
      }


      if (!AlphaNumericUnderscore.test(name)) {
        throw new Error("analytics.logEvent(): Event name '" + name + "' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.");
      }


      if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).');




      (0, _native.getNativeModule)(this).logEvent(name, params);
    } }, { key: "setAnalyticsCollectionEnabled", value: function setAnalyticsCollectionEnabled(






    enabled) {
      (0, _native.getNativeModule)(this).setAnalyticsCollectionEnabled(enabled);
    } }, { key: "setCurrentScreen", value: function setCurrentScreen(







    screenName, screenClassOverride) {
      (0, _native.getNativeModule)(this).setCurrentScreen(screenName, screenClassOverride);
    } }, { key: "setMinimumSessionDuration", value: function setMinimumSessionDuration()






    {var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10000;
      (0, _native.getNativeModule)(this).setMinimumSessionDuration(milliseconds);
    } }, { key: "setSessionTimeoutDuration", value: function setSessionTimeoutDuration()






    {var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1800000;
      (0, _native.getNativeModule)(this).setSessionTimeoutDuration(milliseconds);
    } }, { key: "setUserId", value: function setUserId(






    id) {
      if (id !== null && !(0, _utils.isString)(id)) {
        throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');
      }

      (0, _native.getNativeModule)(this).setUserId(id);
    } }, { key: "setUserProperty", value: function setUserProperty(







    name, value) {
      if (value !== null && !(0, _utils.isString)(value)) {
        throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');
      }

      (0, _native.getNativeModule)(this).setUserProperty(name, value);
    } }, { key: "setUserProperties", value: function setUserProperties(







    object) {var _this = this;
      Object.keys(object).forEach(function (property) {
        var value = object[property];

        if (value !== null && !(0, _utils.isString)(value)) {
          throw new Error("analytics.setUserProperties(): The property with name '" + property + "' must be a string value or null.");
        }

        (0, _native.getNativeModule)(_this).setUserProperty(property, object[property]);
      });
    } }]);return Analytics;}(_ModuleBase.default);exports.default = Analytics;


var statics = {};exports.statics = statics;