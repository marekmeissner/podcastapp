02fe71a59ba6bab31cfc22628f2922ae










'use strict';

exports.__esModule = true;
exports.default = void 0;

var _EmitterSubscription = _interopRequireDefault(require("./EmitterSubscription"));

var _EventSubscriptionVendor = _interopRequireDefault(require("./EventSubscriptionVendor"));

var _emptyFunction = _interopRequireDefault(require("fbjs/lib/emptyFunction"));

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}














var EventEmitter =

function () {






  function EventEmitter(subscriber) {
    this._subscriber = subscriber || new _EventSubscriptionVendor.default();
  }
















  var _proto = EventEmitter.prototype;

  _proto.addListener = function addListener(eventType, listener, context) {
    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));
  };












  _proto.once = function once(eventType, listener, context) {
    var _this = this;

    return this.addListener(eventType, function () {
      _this.removeCurrentListener();

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      listener.apply(context, args);
    });
  };









  _proto.removeAllListeners = function removeAllListeners(eventType) {
    this._subscriber.removeAllSubscriptions(eventType);
  };























  _proto.removeCurrentListener = function removeCurrentListener() {
    (0, _invariant.default)(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
    this.removeSubscription(this._currentSubscription);
  };






  _proto.removeSubscription = function removeSubscription(subscription) {
    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');

    this._subscriber.removeSubscription(subscription);
  };









  _proto.listeners = function listeners(eventType) {
    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

    return subscriptions ? subscriptions.filter(_emptyFunction.default.thatReturnsTrue).map(function (subscription) {
      return subscription.listener;
    }) : [];
  };
















  _proto.emit = function emit(eventType) {
    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

    if (subscriptions) {
      for (var i = 0, l = subscriptions.length; i < l; i++) {
        var subscription = subscriptions[i];

        if (subscription) {
          this._currentSubscription = subscription;
          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
        }
      }

      this._currentSubscription = null;
    }
  };















  _proto.removeListener = function removeListener(eventType, listener) {
    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

    if (subscriptions) {
      for (var i = 0, l = subscriptions.length; i < l; i++) {
        var subscription = subscriptions[i];


        if (subscription && subscription.listener === listener) {
          subscription.remove();
        }
      }
    }
  };

  return EventEmitter;
}();

var _default = EventEmitter;
exports.default = _default;
module.exports = exports.default;