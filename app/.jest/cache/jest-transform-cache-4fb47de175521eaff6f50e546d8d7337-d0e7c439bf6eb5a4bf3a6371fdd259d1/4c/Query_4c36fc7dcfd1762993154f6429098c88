06d2b66d2bf8827e9139278297c6eb66
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));



var _FieldPath = _interopRequireDefault(require("./FieldPath"));
var _QuerySnapshot = _interopRequireDefault(require("./QuerySnapshot"));
var _SnapshotError = _interopRequireDefault(require("./SnapshotError"));
var _DocumentSnapshot = _interopRequireDefault(require("./DocumentSnapshot"));
var _native = require("../../utils/native");
var _serialize = require("./utils/serialize");
var _utils = require("../../utils");
var _events = require("../../utils/events");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}
var DIRECTIONS = {
  ASC: 'ASCENDING',
  asc: 'ASCENDING',
  DESC: 'DESCENDING',
  desc: 'DESCENDING' };

var OPERATORS = {
  '=': 'EQUAL',
  '==': 'EQUAL',
  '>': 'GREATER_THAN',
  '>=': 'GREATER_THAN_OR_EQUAL',
  '<': 'LESS_THAN',
  '<=': 'LESS_THAN_OR_EQUAL',
  'array-contains': 'ARRAY_CONTAINS' };


function buildNativeFieldPath(fieldPath) {
  if (fieldPath instanceof _FieldPath.default) {
    return {
      elements: fieldPath._segments,
      type: 'fieldpath' };

  }

  return {
    string: fieldPath,
    type: 'string' };

}var





Query = function () {
  function Query(firestore, path, fieldFilters, fieldOrders, queryOptions) {(0, _classCallCheck2.default)(this, Query);
    this._fieldFilters = fieldFilters || [];
    this._fieldOrders = fieldOrders || [];
    this._firestore = firestore;
    this._queryOptions = queryOptions || {};
    this._referencePath = path;
  }(0, _createClass2.default)(Query, [{ key: "endAt", value: function endAt()





    {for (var _len = arguments.length, snapshotOrVarArgs = new Array(_len), _key = 0; _key < _len; _key++) {snapshotOrVarArgs[_key] = arguments[_key];}
      var options = _objectSpread({}, this._queryOptions, {
        endAt: this._buildOrderByOption(snapshotOrVarArgs) });

      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
    } }, { key: "endBefore", value: function endBefore()

    {for (var _len2 = arguments.length, snapshotOrVarArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {snapshotOrVarArgs[_key2] = arguments[_key2];}
      var options = _objectSpread({}, this._queryOptions, {
        endBefore: this._buildOrderByOption(snapshotOrVarArgs) });

      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
    } }, { key: "get", value: function get(

    options) {var _this = this;
      if (options) {
        if (!(0, _utils.isObject)(options)) {
          return Promise.reject(new Error('Query.get failed: First argument must be an object.'));
        }

        if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {
          return Promise.reject(new Error('Query.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));
        }
      }

      return (0, _native.getNativeModule)(this._firestore).collectionGet(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, options).then(function (nativeData) {return new _QuerySnapshot.default(_this._firestore, _this, nativeData);});
    } }, { key: "isEqual", value: function isEqual(

    otherQuery) {
      if (!(otherQuery instanceof Query)) {
        throw new Error('firebase.firestore.Query.isEqual(*) expects an instance of Query.');
      }

      if (this._firestore.app.name !== otherQuery._firestore.app.name) {
        return false;
      }

      if (this._firestore.app.options.projectId !== otherQuery._firestore.app.options.projectId) {
        return false;
      }

      if (this._fieldFilters.length !== otherQuery._fieldFilters.length) {
        return false;
      }

      for (var i = 0; i < this._fieldFilters.length; i++) {
        var thisFieldFilter = this._fieldFilters[i];
        var otherFieldFilter = otherQuery._fieldFilters[i];

        if (thisFieldFilter.fieldPath.string !== otherFieldFilter.fieldPath.string) {
          return false;
        }

        if (thisFieldFilter.fieldPath.type !== otherFieldFilter.fieldPath.type) {
          return false;
        }

        if (thisFieldFilter.value.type !== otherFieldFilter.value.type) {
          return false;
        }

        if (thisFieldFilter.value.value !== otherFieldFilter.value.value) {
          return false;
        }

        if (thisFieldFilter.operator !== otherFieldFilter.operator) {
          return false;
        }
      }

      if (this._fieldOrders.length !== otherQuery._fieldOrders.length) {
        return false;
      }

      for (var _i = 0; _i < this._fieldOrders.length; _i++) {
        var thisFieldOrder = this._fieldOrders[_i];
        var otherFieldOrder = otherQuery._fieldOrders[_i];

        if (thisFieldOrder.direction !== otherFieldOrder.direction) {
          return false;
        }

        if (thisFieldOrder.fieldPath.string !== otherFieldOrder.fieldPath.string) {
          return false;
        }

        if (thisFieldOrder.fieldPath.type !== otherFieldOrder.fieldPath.type) {
          return false;
        }
      }

      return true;
    } }, { key: "limit", value: function limit(

    _limit) {


      var options = _objectSpread({}, this._queryOptions, {
        limit: _limit });

      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
    } }, { key: "onSnapshot", value: function onSnapshot(

    optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {var _this2 = this;

      var observer;
      var metadataChanges = {};

      if ((0, _utils.isFunction)(optionsOrObserverOrOnNext)) {
        if (observerOrOnNextOrOnError && !(0, _utils.isFunction)(observerOrOnNextOrOnError)) {
          throw new Error('Query.onSnapshot failed: Second argument must be a valid function.');
        }


        observer = {
          next: optionsOrObserverOrOnNext,
          error: observerOrOnNextOrOnError };

      } else if (optionsOrObserverOrOnNext && (0, _utils.isObject)(optionsOrObserverOrOnNext)) {

        if (optionsOrObserverOrOnNext.next) {
          if ((0, _utils.isFunction)(optionsOrObserverOrOnNext.next)) {
            if (optionsOrObserverOrOnNext.error && !(0, _utils.isFunction)(optionsOrObserverOrOnNext.error)) {
              throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');
            }


            observer = {
              next: optionsOrObserverOrOnNext.next,
              error: optionsOrObserverOrOnNext.error };

          } else {
            throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');
          }
        } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {
          metadataChanges = optionsOrObserverOrOnNext;

          if ((0, _utils.isFunction)(observerOrOnNextOrOnError)) {
            if (onError && !(0, _utils.isFunction)(onError)) {
              throw new Error('Query.onSnapshot failed: Third argument must be a valid function.');
            }


            observer = {
              next: observerOrOnNextOrOnError,
              error: onError };

          } else if (observerOrOnNextOrOnError && (0, _utils.isObject)(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {
            if ((0, _utils.isFunction)(observerOrOnNextOrOnError.next)) {
              if (observerOrOnNextOrOnError.error && !(0, _utils.isFunction)(observerOrOnNextOrOnError.error)) {
                throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');
              }

              observer = {
                next: observerOrOnNextOrOnError.next,
                error: observerOrOnNextOrOnError.error };

            } else {
              throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');
            }
          } else {
            throw new Error('Query.onSnapshot failed: Second argument must be a function or observer.');
          }
        } else {
          throw new Error('Query.onSnapshot failed: First argument must be a function, observer or options.');
        }
      } else {
        throw new Error('Query.onSnapshot failed: Called with invalid arguments.');
      }

      var listenerId = (0, _utils.firestoreAutoId)();

      var listener = function listener(nativeQuerySnapshot) {
        var querySnapshot = new _QuerySnapshot.default(_this2._firestore, _this2, nativeQuerySnapshot);
        observer.next(querySnapshot);
      };

      var unsubscribe;

      var snapshotSubscription = _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, "onQuerySnapshot:" + listenerId), listener);

      var errorSubscription = _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, "onQuerySnapshotError:" + listenerId), function (e) {
        if (unsubscribe) unsubscribe();
        var error = new _SnapshotError.default(e);
        if (observer.error) observer.error(error);else _this2.firestore.log.error(error);
      });

      (0, _native.getNativeModule)(this._firestore).collectionOnSnapshot(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, listenerId, metadataChanges);

      unsubscribe = function unsubscribe() {
        snapshotSubscription.remove();
        errorSubscription.remove();

        (0, _native.getNativeModule)(_this2._firestore).collectionOffSnapshot(_this2._referencePath.relativeName, _this2._fieldFilters, _this2._fieldOrders, _this2._queryOptions, listenerId);
      };

      return unsubscribe;
    } }, { key: "orderBy", value: function orderBy(

    fieldPath) {var directionStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';



      if (this._queryOptions.startAt || this._queryOptions.startAfter || this._queryOptions.endAt || this._queryOptions.endBefore) {
        throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');
      }

      var newOrder = {
        direction: DIRECTIONS[directionStr],
        fieldPath: buildNativeFieldPath(fieldPath) };


      var combinedOrders = this._fieldOrders.concat(newOrder);

      return new Query(this.firestore, this._referencePath, this._fieldFilters, combinedOrders, this._queryOptions);
    } }, { key: "startAfter", value: function startAfter()

    {for (var _len3 = arguments.length, snapshotOrVarArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {snapshotOrVarArgs[_key3] = arguments[_key3];}
      var options = _objectSpread({}, this._queryOptions, {
        startAfter: this._buildOrderByOption(snapshotOrVarArgs) });

      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
    } }, { key: "startAt", value: function startAt()

    {for (var _len4 = arguments.length, snapshotOrVarArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {snapshotOrVarArgs[_key4] = arguments[_key4];}
      var options = _objectSpread({}, this._queryOptions, {
        startAt: this._buildOrderByOption(snapshotOrVarArgs) });

      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);
    } }, { key: "where", value: function where(

    fieldPath, opStr, value) {



      var nativeValue = (0, _serialize.buildTypeMap)(value);
      var newFilter = {
        fieldPath: buildNativeFieldPath(fieldPath),
        operator: OPERATORS[opStr],
        value: nativeValue };


      var combinedFilters = this._fieldFilters.concat(newFilter);

      return new Query(this.firestore, this._referencePath, combinedFilters, this._fieldOrders, this._queryOptions);
    } }, { key: "_buildOrderByOption", value: function _buildOrderByOption(





    snapshotOrVarArgs) {

      var values;

      if (snapshotOrVarArgs.length === 1 && snapshotOrVarArgs[0] instanceof _DocumentSnapshot.default) {
        var docSnapshot = snapshotOrVarArgs[0];
        values = [];

        for (var i = 0; i < this._fieldOrders.length; i++) {
          var fieldOrder = this._fieldOrders[i];

          if (fieldOrder.fieldPath.type === 'string' && fieldOrder.fieldPath.string) {
            values.push(docSnapshot.get(fieldOrder.fieldPath.string));
          } else if (fieldOrder.fieldPath.elements) {
            var fieldPath = (0, _construct2.default)(_FieldPath.default, (0, _toConsumableArray2.default)(fieldOrder.fieldPath.elements));
            values.push(docSnapshot.get(fieldPath));
          }
        }
      } else {
        values = snapshotOrVarArgs;
      }

      return (0, _serialize.buildNativeArray)(values);
    } }, { key: "firestore", get: function get() {return this._firestore;} }]);return Query;}();exports.default = Query;