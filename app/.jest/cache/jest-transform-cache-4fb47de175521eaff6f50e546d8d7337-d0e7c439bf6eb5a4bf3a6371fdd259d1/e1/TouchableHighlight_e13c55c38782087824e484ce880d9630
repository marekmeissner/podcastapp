c4e66b55349bcd05fd9d7a3b4e17ef3c









'use strict';var _jsxFileName = "/private/var/www/Hillcode/podcastapp/app/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}






















var DEFAULT_PROPS = {
  activeOpacity: 0.85,
  delayPressOut: 100,
  underlayColor: 'black' };


var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };




























































































































var TouchableHighlight = require('create-react-class')({
  displayName: 'TouchableHighlight',
  propTypes: _objectSpread({},



  require('./TouchableWithoutFeedback').propTypes, {




    activeOpacity: require('prop-types').number,




    underlayColor: require('../../DeprecatedPropTypes/DeprecatedColorPropType'),




    style: require('../../DeprecatedPropTypes/DeprecatedViewPropTypes').style,



    onShowUnderlay: require('prop-types').func,



    onHideUnderlay: require('prop-types').func,





    hasTVPreferredFocus: require('prop-types').bool,





    nextFocusDown: require('prop-types').number,





    nextFocusForward: require('prop-types').number,





    nextFocusLeft: require('prop-types').number,





    nextFocusRight: require('prop-types').number,





    nextFocusUp: require('prop-types').number,














    tvParallaxProperties: require('prop-types').object,



    testOnly_pressed: require('prop-types').bool }),


  mixins: [require('../../Renderer/shims/NativeMethodsMixin'), require('./Touchable').Mixin.withoutDefaultFocusAndBlur],

  getDefaultProps: function getDefaultProps() {return DEFAULT_PROPS;},

  getInitialState: function getInitialState() {
    this._isMounted = false;
    if (this.props.testOnly_pressed) {
      return _objectSpread({},
      this.touchableGetInitialState(), {
        extraChildStyle: {
          opacity: this.props.activeOpacity },

        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor } });


    } else {
      return _objectSpread({},
      this.touchableGetInitialState(), {
        extraChildStyle: null,
        extraUnderlayStyle: null });

    }
  },

  componentDidMount: function componentDidMount() {
    this._isMounted = true;
    require('./ensurePositiveDelayProps')(this.props);
  },

  componentWillUnmount: function componentWillUnmount() {
    this._isMounted = false;
    clearTimeout(this._hideTimeout);
  },

  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
    require('./ensurePositiveDelayProps')(nextProps);
  },

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: require('../View/ReactNativeViewAttributes').RCTView },






  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    this._showUnderlay();
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    if (!this._hideTimeout) {
      this._hideUnderlay();
    }
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleFocus: function touchableHandleFocus(e) {
    if (require('../../Utilities/Platform').isTV) {
      this._showUnderlay();
    }
    this.props.onFocus && this.props.onFocus(e);
  },

  touchableHandleBlur: function touchableHandleBlur(e) {
    if (require('../../Utilities/Platform').isTV) {
      this._hideUnderlay();
    }
    this.props.onBlur && this.props.onBlur(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    clearTimeout(this._hideTimeout);
    if (!require('../../Utilities/Platform').isTV) {
      this._showUnderlay();
      this._hideTimeout = setTimeout(
      this._hideUnderlay,
      this.props.delayPressOut);

    }
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _showUnderlay: function _showUnderlay() {
    if (!this._isMounted || !this._hasPressHandler()) {
      return;
    }
    this.setState({
      extraChildStyle: {
        opacity: this.props.activeOpacity },

      extraUnderlayStyle: {
        backgroundColor: this.props.underlayColor } });


    this.props.onShowUnderlay && this.props.onShowUnderlay();
  },

  _hideUnderlay: function _hideUnderlay() {
    clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    if (this.props.testOnly_pressed) {
      return;
    }
    if (this._hasPressHandler()) {
      this.setState({
        extraChildStyle: null,
        extraUnderlayStyle: null });

      this.props.onHideUnderlay && this.props.onHideUnderlay();
    }
  },

  _hasPressHandler: function _hasPressHandler() {
    return !!(
    this.props.onPress ||
    this.props.onPressIn ||
    this.props.onPressOut ||
    this.props.onLongPress);

  },

  render: function render() {
    var child = require('react').Children.only(this.props.children);
    return (
      require('react').createElement(require('../View/View'), {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        style: require('../../StyleSheet/StyleSheet').compose(
        this.props.style,
        this.state.extraUnderlayStyle),

        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        nextFocusDown: this.props.nextFocusDown,
        nextFocusForward: this.props.nextFocusForward,
        nextFocusLeft: this.props.nextFocusLeft,
        nextFocusRight: this.props.nextFocusRight,
        nextFocusUp: this.props.nextFocusUp,
        clickable:
        this.props.clickable !== false && this.props.onPress !== undefined,

        onClick: this.touchableHandlePress,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest:
        this.touchableHandleResponderTerminationRequest,

        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        nativeID: this.props.nativeID,
        testID: this.props.testID, __source: { fileName: _jsxFileName, lineNumber: 405 } },
      require('react').cloneElement(child, {
        style: require('../../StyleSheet/StyleSheet').compose(
        child.props.style,
        this.state.extraChildStyle) }),


      require('./Touchable').renderDebugView({
        color: 'green',
        hitSlop: this.props.hitSlop })));



  } });


module.exports = TouchableHighlight;