b6078a858ee6d459bdd0a7a614359e3c
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _Query = _interopRequireDefault(require("./Query"));
var _DataSnapshot = _interopRequireDefault(require("./DataSnapshot"));
var _OnDisconnect = _interopRequireDefault(require("./OnDisconnect"));
var _log = require("../../utils/log");
var _native = require("../../utils/native");
var _ReferenceBase = _interopRequireDefault(require("../../utils/ReferenceBase"));
var _utils = require("../../utils");
var _SyncTree = _interopRequireDefault(require("../../utils/SyncTree"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

var listeners = 0;






var ReferenceEventTypes = {
  value: 'value',
  child_added: 'child_added',
  child_removed: 'child_removed',
  child_changed: 'child_changed',
  child_moved: 'child_moved' };var





























Reference = function (_ReferenceBase) {(0, _inherits2.default)(Reference, _ReferenceBase);
  function Reference(database, path, existingModifiers) {var _this;(0, _classCallCheck2.default)(this, Reference);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Reference).call(this, path));
    _this._refListeners = {};
    _this._database = database;
    _this._query = new _Query.default((0, _assertThisInitialized2.default)(_this), existingModifiers);
    (0, _log.getLogger)(database).debug('Created new Reference', _this._getRefKey());return _this;
  }(0, _createClass2.default)(Reference, [{ key: "keepSynced", value: function keepSynced(












    bool) {
      return (0, _native.getNativeModule)(this._database).keepSynced(this._getRefKey(), this.path, this._query.getModifiers(), bool);
    } }, { key: "set", value: function set(










    value, onComplete) {
      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).set(this.path, this._serializeAnyType(value)), onComplete);
    } }, { key: "setPriority", value: function setPriority(










    priority, onComplete) {
      var _priority = this._serializeAnyType(priority);

      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).setPriority(this.path, _priority), onComplete);
    } }, { key: "setWithPriority", value: function setWithPriority(











    value, priority, onComplete) {
      var _value = this._serializeAnyType(value);

      var _priority = this._serializeAnyType(priority);

      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).setWithPriority(this.path, _value, _priority), onComplete);
    } }, { key: "update", value: function update(










    val, onComplete) {
      var value = this._serializeObject(val);

      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).update(this.path, value), onComplete);
    } }, { key: "remove", value: function remove(









    onComplete) {
      return (0, _utils.promiseOrCallback)((0, _native.getNativeModule)(this._database).remove(this.path), onComplete);
    } }, { key: "transaction", value: function transaction(










    transactionUpdate, onComplete) {var _this2 = this;var applyLocally = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (!(0, _utils.isFunction)(transactionUpdate)) {
        return Promise.reject(new Error('Missing transactionUpdate function argument.'));
      }

      return new Promise(function (resolve, reject) {
        var onCompleteWrapper = function onCompleteWrapper(error, committed, snapshotData) {
          if ((0, _utils.isFunction)(onComplete)) {
            if (error) {
              onComplete(error, committed, null);
            } else {
              onComplete(null, committed, new _DataSnapshot.default(_this2, snapshotData));
            }
          }

          if (error) return reject(error);
          return resolve({
            committed: committed,
            snapshot: new _DataSnapshot.default(_this2, snapshotData) });

        };


        _this2._database._transactionHandler.add(_this2, transactionUpdate, onCompleteWrapper, applyLocally);
      });
    } }, { key: "once", value: function once()










    {var _this3 = this;var eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'value';var successCallback = arguments.length > 1 ? arguments[1] : undefined;var cancelOrContext = arguments.length > 2 ? arguments[2] : undefined;var context = arguments.length > 3 ? arguments[3] : undefined;
      return (0, _native.getNativeModule)(this._database).once(this._getRefKey(), this.path, this._query.getModifiers(), eventName).then(function (_ref)

      {var snapshot = _ref.snapshot;
        var _snapshot = new _DataSnapshot.default(_this3, snapshot);

        if ((0, _utils.isFunction)(successCallback)) {
          if ((0, _utils.isObject)(cancelOrContext)) successCallback.bind(cancelOrContext)(_snapshot);
          if (context && (0, _utils.isObject)(context)) successCallback.bind(context)(_snapshot);
          successCallback(_snapshot);
        }

        return _snapshot;
      }).catch(function (error) {
        if ((0, _utils.isFunction)(cancelOrContext)) return cancelOrContext(error);
        throw error;
      });
    } }, { key: "push", value: function push(








    value, onComplete) {
      var name = (0, _utils.generatePushID)(this._database._serverTimeOffset);
      var pushRef = this.child(name);
      var thennablePushRef = this.child(name);
      var promise;

      if (value != null) {
        promise = thennablePushRef.set(value, onComplete).then(function () {return pushRef;});
      } else {
        promise = Promise.resolve(pushRef);
      }

      thennablePushRef.then = promise.then.bind(promise);
      thennablePushRef.catch = promise.catch.bind(promise);

      if ((0, _utils.isFunction)(onComplete)) {
        promise.catch(function () {});
      }

      return thennablePushRef;
    } }, { key: "orderByKey", value: function orderByKey()










    {
      return this.orderBy('orderByKey');
    } }, { key: "orderByPriority", value: function orderByPriority()






    {
      return this.orderBy('orderByPriority');
    } }, { key: "orderByValue", value: function orderByValue()






    {
      return this.orderBy('orderByValue');
    } }, { key: "orderByChild", value: function orderByChild(







    key) {
      return this.orderBy('orderByChild', key);
    } }, { key: "orderBy", value: function orderBy(








    name, key) {
      var newRef = new Reference(this._database, this.path, this._query.getModifiers());

      newRef._query.orderBy(name, key);

      return newRef;
    } }, { key: "limitToLast", value: function limitToLast(











    limit) {
      return this.limit('limitToLast', limit);
    } }, { key: "limitToFirst", value: function limitToFirst(







    limit) {
      return this.limit('limitToFirst', limit);
    } }, { key: "limit", value: function limit(








    name, _limit) {
      var newRef = new Reference(this._database, this.path, this._query.getModifiers());

      newRef._query.limit(name, _limit);

      return newRef;
    } }, { key: "equalTo", value: function equalTo(












    value, key) {
      return this.filter('equalTo', value, key);
    } }, { key: "endAt", value: function endAt(








    value, key) {
      return this.filter('endAt', value, key);
    } }, { key: "startAt", value: function startAt(








    value, key) {
      return this.filter('startAt', value, key);
    } }, { key: "filter", value: function filter(









    name, value, key) {
      var newRef = new Reference(this._database, this.path, this._query.getModifiers());

      newRef._query.filter(name, value, key);

      return newRef;
    } }, { key: "onDisconnect", value: function onDisconnect()






    {
      return new _OnDisconnect.default(this);
    } }, { key: "child", value: function child(










    path) {
      return new Reference(this._database, this.path + "/" + path);
    } }, { key: "toString", value: function toString()






    {
      return "" + this._database.databaseUrl + this.path;
    } }, { key: "toJSON", value: function toJSON()






    {
      return this.toString();
    } }, { key: "isEqual", value: function isEqual(










    otherRef) {
      return !!otherRef && otherRef.constructor === Reference && otherRef.key === this.key && this._query.queryIdentifier() === otherRef._query.queryIdentifier();
    } }, { key: "_getRegistrationKey", value: function _getRegistrationKey(

















































    eventType) {
      return "$" + this._database.databaseUrl + "$/" + this.path + "$" + this._query.queryIdentifier() + "$" + listeners + "$" + eventType;
    } }, { key: "_getRefKey", value: function _getRefKey()









    {
      return "$" + this._database.databaseUrl + "$/" + this.path + "$" + this._query.queryIdentifier();
    } }, { key: "_serializeObject", value: function _serializeObject(








    obj) {
      if (!(0, _utils.isObject)(obj)) return obj;


      return (0, _utils.tryJSONParse)((0, _utils.tryJSONStringify)(obj));
    } }, { key: "_serializeAnyType", value: function _serializeAnyType(








    value) {
      if ((0, _utils.isObject)(value)) {
        return {
          type: 'object',
          value: this._serializeObject(value) };

      }

      return {
        type: typeof value,
        value: value };

    } }, { key: "on", value: function on(




























    eventType, callback, cancelCallbackOrContext, context) {
      if (!eventType) {
        throw new Error('Query.on failed: Function called with 0 arguments. Expects at least 2.');
      }

      if (!(0, _utils.isString)(eventType) || !ReferenceEventTypes[eventType]) {
        throw new Error("Query.on failed: First argument must be a valid string event type: \"" + Object.keys(ReferenceEventTypes).join(', ') + "\"");
      }

      if (!callback) {
        throw new Error('Query.on failed: Function called with 1 argument. Expects at least 2.');
      }

      if (!(0, _utils.isFunction)(callback)) {
        throw new Error('Query.on failed: Second argument must be a valid function.');
      }

      if (cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) && !(0, _utils.isObject)(context) && !(0, _utils.isObject)(cancelCallbackOrContext)) {
        throw new Error('Query.on failed: Function called with 3 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');
      }

      if (cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) && context) {
        throw new Error('Query.on failed: Function called with 4 arguments, but third optional argument `cancelCallbackOrContext` was not a function.');
      }

      var eventRegistrationKey = this._getRegistrationKey(eventType);

      var registrationCancellationKey = eventRegistrationKey + "$cancelled";

      var _context = cancelCallbackOrContext && !(0, _utils.isFunction)(cancelCallbackOrContext) ? cancelCallbackOrContext : context;

      var registrationObj = {
        eventType: eventType,
        ref: this,
        path: this.path,
        key: this._getRefKey(),
        appName: this._database.app.name,
        dbURL: this._database.databaseUrl,
        eventRegistrationKey: eventRegistrationKey };

      _SyncTree.default.addRegistration(_objectSpread({}, registrationObj, {
        listener: _context ? callback.bind(_context) : callback }));


      if (cancelCallbackOrContext && (0, _utils.isFunction)(cancelCallbackOrContext)) {



        _SyncTree.default.addRegistration({
          ref: this,
          once: true,
          path: this.path,
          key: this._getRefKey(),
          appName: this._database.app.name,
          dbURL: this._database.databaseUrl,
          eventType: eventType + "$cancelled",
          eventRegistrationKey: registrationCancellationKey,
          listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext });

      }


      (0, _native.getNativeModule)(this._database).on({
        eventType: eventType,
        path: this.path,
        key: this._getRefKey(),
        appName: this._database.app.name,
        modifiers: this._query.getModifiers(),
        hasCancellationCallback: (0, _utils.isFunction)(cancelCallbackOrContext),
        registration: {
          eventRegistrationKey: eventRegistrationKey,
          key: registrationObj.key,
          registrationCancellationKey: registrationCancellationKey } });




      listeners += 1;


      return callback;
    } }, { key: "off", value: function off()

















    {var eventType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';var originalCallback = arguments.length > 1 ? arguments[1] : undefined;
      if (!arguments.length) {


        return _SyncTree.default.removeListenersForRegistrations(_SyncTree.default.getRegistrationsByPath(this.path));
      }





      if (eventType && (!(0, _utils.isString)(eventType) || !ReferenceEventTypes[eventType])) {
        throw new Error("Query.off failed: First argument must be a valid string event type: \"" + Object.keys(ReferenceEventTypes).join(', ') + "\"");
      }

      if (originalCallback && !(0, _utils.isFunction)(originalCallback)) {
        throw new Error('Query.off failed: Function called with 2 arguments, but second optional argument was not a function.');
      }







      if (eventType && originalCallback) {
        var registration = _SyncTree.default.getOneByPathEventListener(this.path, eventType, originalCallback);
        if (!registration) return [];

        _SyncTree.default.removeListenersForRegistrations([registration + "$cancelled"]);


        return _SyncTree.default.removeListenerRegistrations(originalCallback, [registration]);
      }



      var registrations = _SyncTree.default.getRegistrationsByPathEvent(this.path, eventType);
      _SyncTree.default.removeListenersForRegistrations(_SyncTree.default.getRegistrationsByPathEvent(this.path, eventType + "$cancelled"));
      return _SyncTree.default.removeListenersForRegistrations(registrations);
    } }, { key: "parent", get: function get() {if (this.path === '/') return null;return new Reference(this._database, this.path.substring(0, this.path.lastIndexOf('/')));} }, { key: "ref", get: function get() {return this;} }, { key: "root", get: function get() {return new Reference(this._database, '/');} }]);return Reference;}(_ReferenceBase.default);exports.default = Reference;