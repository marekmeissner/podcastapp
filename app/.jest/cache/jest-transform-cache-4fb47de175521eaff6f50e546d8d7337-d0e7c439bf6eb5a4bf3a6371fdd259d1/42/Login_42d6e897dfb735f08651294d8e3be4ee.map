{"version":3,"sources":["/private/var/www/Hillcode/podcastapp/app/src/screens/Auth/Login/Login.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport {View, ActivityIndicator, Image} from 'react-native';\nimport {\n  Container,\n  Content,\n  Item,\n  Input,\n  Button,\n  Text,\n  Form,\n  Label,\n} from 'native-base';\nimport {UserCredentials} from '../types';\nimport {Formik, FormikActions} from 'formik';\nimport * as Yup from 'yup';\nimport {EMAIL_REGEX} from '../../../utils/constants';\nimport {EmailPasswordSignIn} from '../../../../firebase/auth/signIn';\nimport InputError from '../../../components/InputError/InputError';\n\nexport class Login extends React.Component {\n  handleLogin = async (\n    {email, password}: UserCredentials,\n    {setSubmitting, setStatus}: FormikActions<UserCredentials>,\n  ) => {\n    try {\n      await EmailPasswordSignIn({email, password});\n    } catch ({message}) {\n      console.warn(message);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .matches(EMAIL_REGEX, 'Email address provided is invalid')\n      .required('Required!'),\n    password: Yup.string().required('Required!'),\n  });\n\n  render() {\n    return (\n      <Container>\n        <View\n          style={{height: 300, justifyContent: 'center', alignItems: 'center'}}>\n          <Image\n            style={{width: '50%', height: '50%', marginBottom: -50}}\n            source={require('../../../assets/logo.png')}\n          />\n        </View>\n        <Content>\n          <Formik\n            initialValues={{\n              email: '',\n              password: '',\n            }}\n            validationSchema={this.validationSchema}\n            onSubmit={this.handleLogin}>\n            {({\n              handleChange,\n              handleSubmit,\n              values,\n              setFieldTouched,\n              errors,\n              touched,\n              isValid,\n              isSubmitting,\n            }) => {\n              return (\n                <Form style={{padding: 20}}>\n                  <Content style={{height: 80, paddingTop: 10}}>\n                    <Item floatingLabel error={touched.email && !!errors.email}>\n                      <Label>Email</Label>\n                      <Input\n                        testID={'email'}\n                        keyboardType=\"email-address\"\n                        onChangeText={handleChange('email')}\n                        value={values.email}\n                        onBlur={() => setFieldTouched('email')}\n                        autoCapitalize=\"none\"\n                      />\n                    </Item>\n                    {errors.email && touched.email && (\n                      <InputError style={{paddingTop: 5}} testID={'emailError'}>\n                        {errors.email}\n                      </InputError>\n                    )}\n                  </Content>\n                  <Content style={{height: 80, paddingTop: 10}}>\n                    <Item\n                      floatingLabel\n                      error={touched.password && !!errors.password}>\n                      <Label>Password</Label>\n                      <Input\n                        testID={'password'}\n                        onChangeText={handleChange('password')}\n                        value={values.password}\n                        textContentType=\"password\"\n                        secureTextEntry\n                        onBlur={() => setFieldTouched('password')}\n                        autoCapitalize=\"none\"\n                      />\n                    </Item>\n                    {errors.password && touched.password && (\n                      <InputError\n                        style={{paddingTop: 5}}\n                        testID={'passwordError'}>\n                        {errors.password}\n                      </InputError>\n                    )}\n                  </Content>\n\n                  <Button\n                    testID={'submit'}\n                    rounded\n                    large\n                    onPress={handleSubmit}\n                    style={{marginTop: 40}}>\n                    {isSubmitting ? (\n                      <ActivityIndicator\n                        testID={'loader'}\n                        size=\"small\"\n                        color=\"#ffffff\"\n                      />\n                    ) : (\n                      <Text>Sign in</Text>\n                    )}\n                  </Button>\n                  <View\n                    style={{\n                      flexDirection: 'row',\n                      justifyContent: 'space-between',\n                      paddingTop: 15,\n                    }}>\n                    <Button transparent small>\n                      <Text>Forgot password?</Text>\n                    </Button>\n                    <Button transparent small>\n                      <Text>Don't have account?</Text>\n                    </Button>\n                  </View>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Content>\n      </Container>\n    );\n  }\n}\n\nexport default Login;\n"]}