3c1310110db5eed000ddaf42ead85ab8
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));



var _events = require("../../utils/events");
var _native = require("../../utils/native");
var _Transaction = _interopRequireDefault(require("./Transaction"));
var transactionId = 0;






var generateTransactionId = function generateTransactionId() {return transactionId++;};var




TransactionHandler = function () {
  function TransactionHandler(firestore) {(0, _classCallCheck2.default)(this, TransactionHandler);
    this._pending = {};
    this._firestore = firestore;
    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)(this._firestore, 'firestore_transaction_event'), this._handleTransactionEvent.bind(this));
  }(0, _createClass2.default)(TransactionHandler, [{ key: "_add", value: function _add(












    updateFunction) {var _this = this;
      var id = generateTransactionId();

      var meta = {
        id: id,
        updateFunction: updateFunction,
        stack: new Error().stack.split('\n').slice(2).join('\n') };

      this._pending[id] = {
        meta: meta,
        transaction: new _Transaction.default(this._firestore, meta) };


      return new Promise(function (resolve, reject) {
        (0, _native.getNativeModule)(_this._firestore).transactionBegin(id);

        meta.resolve = function (r) {
          resolve(r);

          _this._remove(id);
        };

        meta.reject = function (e) {
          reject(e);

          _this._remove(id);
        };
      });
    } }, { key: "_remove", value: function _remove(








    id) {
      (0, _native.getNativeModule)(this._firestore).transactionDispose(id);
      delete this._pending[id];
    } }, { key: "_handleTransactionEvent", value: function _handleTransactionEvent(
















    event) {

      switch (event.type) {
        case 'update':
          this._handleUpdate(event);

          break;

        case 'error':
          this._handleError(event);

          break;

        case 'complete':
          this._handleComplete(event);

          break;}

    } }, { key: "_handleUpdate", value: function _handleUpdate(








    event) {var id, _this$_pending$id, meta, transaction, updateFunction, reject, finalError, updateFailed, pendingResult, possiblePromise;return _regenerator.default.async(function _handleUpdate$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:

              id =
              event.id;if (

              this._pending[id]) {_context.next = 3;break;}return _context.abrupt("return", this._remove(id));case 3:_this$_pending$id =



              this._pending[id], meta = _this$_pending$id.meta, transaction = _this$_pending$id.transaction;

              updateFunction =

              meta.updateFunction, reject = meta.reject;

              transaction._prepare();_context.prev = 6;






              possiblePromise = updateFunction(transaction);if (!(


              !possiblePromise || !possiblePromise.then)) {_context.next = 12;break;}
              finalError = new Error('Update function for `firestore.runTransaction(updateFunction)` must return a Promise.');_context.next = 15;break;case 12:_context.next = 14;return _regenerator.default.awrap(

              possiblePromise);case 14:pendingResult = _context.sent;case 15:_context.next = 21;break;case 17:_context.prev = 17;_context.t0 = _context["catch"](6);




              updateFailed = true;
              finalError = _context.t0;case 21:if (!(





              updateFailed || finalError)) {_context.next = 23;break;}return _context.abrupt("return",

              reject(finalError));case 23:





              transaction._pendingResult = pendingResult;return _context.abrupt("return",

              (0, _native.getNativeModule)(this._firestore).transactionApplyBuffer(id, transaction._commandBuffer));case 25:case "end":return _context.stop();}}}, null, this, [[6, 17]]);} }, { key: "_handleError", value: function _handleError(









    event) {var

      id =

      event.id,error = event.error;var

      meta =
      this._pending[id].meta;

      if (meta && error) {var

        code =

        error.code,message = error.message;



        var errorWithStack = new Error(message);

        errorWithStack.code = code;

        errorWithStack.stack = "Error: " + message + "\n" + meta.stack;

        meta.reject(errorWithStack);
      }
    } }, { key: "_handleComplete", value: function _handleComplete(








    event) {var

      id =
      event.id;var _this$_pending$id2 =



      this._pending[id],meta = _this$_pending$id2.meta,transaction = _this$_pending$id2.transaction;

      if (meta) {
        var pendingResult = transaction._pendingResult;

        meta.resolve(pendingResult);
      }
    } }]);return TransactionHandler;}();exports.default = TransactionHandler;