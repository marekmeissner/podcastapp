1ac8bf206b26d44a98fc5e99a2a3766a
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _reactNative = require("react-native");
var _events = require("../../utils/events");
var _log = require("../../utils/log");
var _ModuleBase = _interopRequireDefault(require("../../utils/ModuleBase"));
var _native = require("../../utils/native");
var _utils = require("../../utils");
var _AndroidAction = _interopRequireDefault(require("./AndroidAction"));
var _AndroidChannel = _interopRequireDefault(require("./AndroidChannel"));
var _AndroidChannelGroup = _interopRequireDefault(require("./AndroidChannelGroup"));
var _AndroidNotifications = _interopRequireDefault(require("./AndroidNotifications"));
var _IOSNotifications = _interopRequireDefault(require("./IOSNotifications"));
var _AndroidRemoteInput = _interopRequireDefault(require("./AndroidRemoteInput"));
var _Notification = _interopRequireDefault(require("./Notification"));
var _types = require("./types");
var NATIVE_EVENTS = ['notifications_notification_displayed', 'notifications_notification_opened', 'notifications_notification_received'];
var MODULE_NAME = 'RNFirebaseNotifications';exports.MODULE_NAME = MODULE_NAME;
var NAMESPACE = 'notifications';exports.NAMESPACE = NAMESPACE;var















Notifications = function (_ModuleBase) {(0, _inherits2.default)(Notifications, _ModuleBase);
  function Notifications(app) {var _this;(0, _classCallCheck2.default)(this, Notifications);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Notifications).call(this, app, {
      events: NATIVE_EVENTS,
      hasCustomUrlSupport: false,
      moduleName: MODULE_NAME,
      hasMultiAppSupport: false,
      namespace: NAMESPACE }));

    _this._android = new _AndroidNotifications.default((0, _assertThisInitialized2.default)(_this));
    _this._ios = new _IOSNotifications.default((0, _assertThisInitialized2.default)(_this));
    _events.SharedEventEmitter.addListener(

    'notifications_notification_displayed', function (notification) {
      _events.SharedEventEmitter.emit('onNotificationDisplayed', new _Notification.default(notification, (0, _assertThisInitialized2.default)(_this)));
    });
    _events.SharedEventEmitter.addListener(

    'notifications_notification_opened', function (notificationOpen) {
      _events.SharedEventEmitter.emit('onNotificationOpened', {
        action: notificationOpen.action,
        notification: new _Notification.default(notificationOpen.notification, (0, _assertThisInitialized2.default)(_this)),
        results: notificationOpen.results });

    });
    _events.SharedEventEmitter.addListener(

    'notifications_notification_received', function (notification) {
      _events.SharedEventEmitter.emit('onNotification', new _Notification.default(notification, (0, _assertThisInitialized2.default)(_this)));
    });

    if (_reactNative.Platform.OS === 'ios') {
      (0, _native.getNativeModule)((0, _assertThisInitialized2.default)(_this)).jsInitialised();
    }return _this;
  }(0, _createClass2.default)(Notifications, [{ key: "cancelAllNotifications", value: function cancelAllNotifications()













    {
      return (0, _native.getNativeModule)(this).cancelAllNotifications();
    } }, { key: "cancelNotification", value: function cancelNotification(






    notificationId) {
      if (!notificationId) {
        return Promise.reject(new Error('Notifications: cancelNotification expects a `notificationId`'));
      }

      return (0, _native.getNativeModule)(this).cancelNotification(notificationId);
    } }, { key: "displayNotification", value: function displayNotification(







    notification) {
      if (!(notification instanceof _Notification.default)) {
        return Promise.reject(new Error("Notifications:displayNotification expects a 'Notification' but got type " + typeof notification));
      }

      try {
        return (0, _native.getNativeModule)(this).displayNotification(notification.build());
      } catch (error) {
        return Promise.reject(error);
      }
    } }, { key: "getBadge", value: function getBadge()

    {
      return (0, _native.getNativeModule)(this).getBadge();
    } }, { key: "getInitialNotification", value: function getInitialNotification()

    {var _this2 = this;
      return (0, _native.getNativeModule)(this).getInitialNotification().then(function (notificationOpen) {
        if (notificationOpen) {
          return {
            action: notificationOpen.action,
            notification: new _Notification.default(notificationOpen.notification, _this2),
            results: notificationOpen.results };

        }

        return null;
      });
    } }, { key: "getScheduledNotifications", value: function getScheduledNotifications()






    {
      return (0, _native.getNativeModule)(this).getScheduledNotifications();
    } }, { key: "onNotification", value: function onNotification(

    nextOrObserver) {var _this3 = this;
      var listener;

      if ((0, _utils.isFunction)(nextOrObserver)) {
        listener = nextOrObserver;
      } else if ((0, _utils.isObject)(nextOrObserver) && (0, _utils.isFunction)(nextOrObserver.next)) {
        listener = nextOrObserver.next;
      } else {
        throw new Error('Notifications.onNotification failed: First argument must be a function or observer object with a `next` function.');
      }

      (0, _log.getLogger)(this).info('Creating onNotification listener');
      _events.SharedEventEmitter.addListener('onNotification', listener);
      return function () {
        (0, _log.getLogger)(_this3).info('Removing onNotification listener');
        _events.SharedEventEmitter.removeListener('onNotification', listener);
      };
    } }, { key: "onNotificationDisplayed", value: function onNotificationDisplayed(

    nextOrObserver) {var _this4 = this;
      var listener;

      if ((0, _utils.isFunction)(nextOrObserver)) {
        listener = nextOrObserver;
      } else if ((0, _utils.isObject)(nextOrObserver) && (0, _utils.isFunction)(nextOrObserver.next)) {
        listener = nextOrObserver.next;
      } else {
        throw new Error('Notifications.onNotificationDisplayed failed: First argument must be a function or observer object with a `next` function.');
      }

      (0, _log.getLogger)(this).info('Creating onNotificationDisplayed listener');
      _events.SharedEventEmitter.addListener('onNotificationDisplayed', listener);
      return function () {
        (0, _log.getLogger)(_this4).info('Removing onNotificationDisplayed listener');
        _events.SharedEventEmitter.removeListener('onNotificationDisplayed', listener);
      };
    } }, { key: "onNotificationOpened", value: function onNotificationOpened(

    nextOrObserver) {var _this5 = this;
      var listener;

      if ((0, _utils.isFunction)(nextOrObserver)) {
        listener = nextOrObserver;
      } else if ((0, _utils.isObject)(nextOrObserver) && (0, _utils.isFunction)(nextOrObserver.next)) {
        listener = nextOrObserver.next;
      } else {
        throw new Error('Notifications.onNotificationOpened failed: First argument must be a function or observer object with a `next` function.');
      }

      (0, _log.getLogger)(this).info('Creating onNotificationOpened listener');
      _events.SharedEventEmitter.addListener('onNotificationOpened', listener);
      return function () {
        (0, _log.getLogger)(_this5).info('Removing onNotificationOpened listener');
        _events.SharedEventEmitter.removeListener('onNotificationOpened', listener);
      };
    } }, { key: "removeAllDeliveredNotifications", value: function removeAllDeliveredNotifications()





    {
      return (0, _native.getNativeModule)(this).removeAllDeliveredNotifications();
    } }, { key: "removeDeliveredNotification", value: function removeDeliveredNotification(






    notificationId) {
      if (!notificationId) {
        return Promise.reject(new Error('Notifications: removeDeliveredNotification expects a `notificationId`'));
      }

      return (0, _native.getNativeModule)(this).removeDeliveredNotification(notificationId);
    } }, { key: "scheduleNotification", value: function scheduleNotification(







    notification, schedule) {
      if (!(notification instanceof _Notification.default)) {
        return Promise.reject(new Error("Notifications:scheduleNotification expects a 'Notification' but got type " + typeof notification));
      }

      try {
        var nativeNotification = notification.build();
        nativeNotification.schedule = schedule;
        return (0, _native.getNativeModule)(this).scheduleNotification(nativeNotification);
      } catch (error) {
        return Promise.reject(error);
      }
    } }, { key: "setBadge", value: function setBadge(

    badge) {
      return (0, _native.getNativeModule)(this).setBadge(badge);
    } }, { key: "android", get: function get() {return this._android;} }, { key: "ios", get: function get() {return this._ios;} }]);return Notifications;}(_ModuleBase.default);exports.default = Notifications;


var statics = {
  Android: {
    Action: _AndroidAction.default,
    BadgeIconType: _types.BadgeIconType,
    Category: _types.Category,
    Channel: _AndroidChannel.default,
    ChannelGroup: _AndroidChannelGroup.default,
    Defaults: _types.Defaults,
    GroupAlert: _types.GroupAlert,
    Importance: _types.Importance,
    Priority: _types.Priority,
    RemoteInput: _AndroidRemoteInput.default,
    SemanticAction: _types.SemanticAction,
    Visibility: _types.Visibility },

  Notification: _Notification.default };exports.statics = statics;