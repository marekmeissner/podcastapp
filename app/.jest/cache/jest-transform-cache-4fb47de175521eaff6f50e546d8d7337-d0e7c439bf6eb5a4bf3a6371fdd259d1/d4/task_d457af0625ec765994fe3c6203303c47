fd7efd55941b64b2c5692aa9e4853ce5
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.DOWNLOAD_TASK = exports.UPLOAD_TASK = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));



var _ = require("./");
var _utils = require("../../utils");
var UPLOAD_TASK = 'upload';exports.UPLOAD_TASK = UPLOAD_TASK;
var DOWNLOAD_TASK = 'download';exports.DOWNLOAD_TASK = DOWNLOAD_TASK;var




StorageTask = function () {
  function StorageTask(type, promise, storageRef) {(0, _classCallCheck2.default)(this, StorageTask);
    this.type = type;
    this.ref = storageRef;
    this.storage = storageRef._storage;
    this.path = storageRef.path;

    this.then = promise.then.bind(promise);
    this.catch = promise.catch.bind(promise);
  }(0, _createClass2.default)(StorageTask, [{ key: "_interceptSnapshotEvent", value: function _interceptSnapshotEvent(








    f) {var _this = this;
      if (!(0, _utils.isFunction)(f)) return null;
      return function (snapshot) {
        var _snapshot = (0, _extends2.default)({}, snapshot);

        _snapshot.task = _this;
        _snapshot.ref = _this.ref;
        return f && f(_snapshot);
      };
    } }, { key: "_interceptErrorEvent", value: function _interceptErrorEvent(








    f) {
      if (!(0, _utils.isFunction)(f)) return null;
      return function (error) {
        var _error = new Error(error.message);


        _error.code = error.code;
        return f && f(_error);
      };
    } }, { key: "_subscribe", value: function _subscribe(










    nextOrObserver, error, complete) {var _this2 = this;
      var _error;

      var _next;

      var _complete;

      if (typeof nextOrObserver === 'function') {
        _error = this._interceptErrorEvent(error);
        _next = this._interceptSnapshotEvent(nextOrObserver);
        _complete = this._interceptSnapshotEvent(complete);
      } else if (nextOrObserver) {
        _error = this._interceptErrorEvent(nextOrObserver.error);
        _next = this._interceptSnapshotEvent(nextOrObserver.next);
        _complete = this._interceptSnapshotEvent(nextOrObserver.complete);
      }

      if (_next) {
        this.storage._addListener(this.path, _.statics.TaskEvent.STATE_CHANGED, _next);
      }

      if (_error) {
        this.storage._addListener(this.path, this.type + "_failure", _error);
      }

      if (_complete) {
        this.storage._addListener(this.path, this.type + "_success", _complete);
      }

      return function () {
        if (_next) _this2.storage._removeListener(_this2.path, _.statics.TaskEvent.STATE_CHANGED, _next);
        if (_error) _this2.storage._removeListener(_this2.path, _this2.type + "_failure", _error);
        if (_complete) _this2.storage._removeListener(_this2.path, _this2.type + "_success", _complete);
      };
    } }, { key: "on", value: function on()










    {var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _.statics.TaskEvent.STATE_CHANGED;var nextOrObserver = arguments.length > 1 ? arguments[1] : undefined;var error = arguments.length > 2 ? arguments[2] : undefined;var complete = arguments.length > 3 ? arguments[3] : undefined;
      if (!event) {
        throw new Error("StorageTask.on listener is missing required string argument 'event'.");
      }

      if (event !== _.statics.TaskEvent.STATE_CHANGED) {
        throw new Error("StorageTask.on event argument must be a string with a value of '" + _.statics.TaskEvent.STATE_CHANGED + "'");
      }


      if (!nextOrObserver && !error && !complete) {
        return this._subscribe.bind(this);
      }

      return this._subscribe(nextOrObserver, error, complete);
    } }, { key: "pause", value: function pause()

    {
      throw new Error('.pause() is not currently supported by react-native-firebase');
    } }, { key: "resume", value: function resume()

    {

      throw new Error('.resume() is not currently supported by react-native-firebase');
    } }, { key: "cancel", value: function cancel()

    {

      throw new Error('.cancel() is not currently supported by react-native-firebase');
    } }]);return StorageTask;}();exports.default = StorageTask;