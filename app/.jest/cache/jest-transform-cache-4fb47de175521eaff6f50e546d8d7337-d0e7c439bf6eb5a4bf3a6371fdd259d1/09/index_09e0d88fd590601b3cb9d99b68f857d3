c053ac5ca00522d39bc98ba3c3092856
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _reactNative = require("react-native");
var _events = require("../../utils/events");
var _ModuleBase = _interopRequireDefault(require("../../utils/ModuleBase"));
var _CollectionReference = _interopRequireDefault(require("./CollectionReference"));
var _DocumentReference = _interopRequireDefault(require("./DocumentReference"));
var _FieldPath = _interopRequireDefault(require("./FieldPath"));
var _FieldValue = _interopRequireDefault(require("./FieldValue"));
var _GeoPoint = _interopRequireDefault(require("./GeoPoint"));
var _Blob = _interopRequireDefault(require("./Blob"));
var _Path = _interopRequireDefault(require("./Path"));
var _WriteBatch = _interopRequireDefault(require("./WriteBatch"));
var _TransactionHandler = _interopRequireDefault(require("./TransactionHandler"));
var _Timestamp = _interopRequireDefault(require("./Timestamp"));
var _Transaction = _interopRequireDefault(require("./Transaction"));
var _utils = require("../../utils");
var _native = require("../../utils/native");

var CACHE_SIZE_UNLIMITED = -1;

var MIN_CACHE_SIZE = 1048576;
var NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];
var LogLevels = ['debug', 'error', 'silent'];
var MODULE_NAME = 'RNFirebaseFirestore';exports.MODULE_NAME = MODULE_NAME;
var NAMESPACE = 'firestore';exports.NAMESPACE = NAMESPACE;var




Firestore = function (_ModuleBase) {(0, _inherits2.default)(Firestore, _ModuleBase);
  function Firestore(app) {var _this;(0, _classCallCheck2.default)(this, Firestore);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Firestore).call(this, app, {
      events: NATIVE_EVENTS,
      moduleName: MODULE_NAME,
      hasMultiAppSupport: true,
      hasCustomUrlSupport: false,
      namespace: NAMESPACE }));

    _this._referencePath = new _Path.default([]);
    _this._transactionHandler = new _TransactionHandler.default((0, _assertThisInitialized2.default)(_this));
    _events.SharedEventEmitter.addListener(

    (0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'firestore_collection_sync_event'), _this._onCollectionSyncEvent.bind((0, _assertThisInitialized2.default)(_this)));
    _events.SharedEventEmitter.addListener(

    (0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'firestore_document_sync_event'), _this._onDocumentSyncEvent.bind((0, _assertThisInitialized2.default)(_this)));return _this;
  }(0, _createClass2.default)(Firestore, [{ key: "batch", value: function batch()













    {
      return new _WriteBatch.default(this);
    } }, { key: "collection", value: function collection(








    collectionPath) {
      var path = this._referencePath.child(collectionPath);

      if (!path.isCollection) {
        throw new Error('Argument "collectionPath" must point to a collection.');
      }

      return new _CollectionReference.default(this, path);
    } }, { key: "disableNetwork", value: function disableNetwork()

    {
      return (0, _native.getNativeModule)(this).disableNetwork();
    } }, { key: "doc", value: function doc(








    documentPath) {
      var path = this._referencePath.child(documentPath);

      if (!path.isDocument) {
        throw new Error('Argument "documentPath" must point to a document.');
      }

      return new _DocumentReference.default(this, path);
    } }, { key: "enableNetwork", value: function enableNetwork()

    {
      return (0, _native.getNativeModule)(this).enableNetwork();
    } }, { key: "runTransaction", value: function runTransaction(












    updateFunction) {
      return this._transactionHandler._add(updateFunction);
    } }, { key: "settings", value: function settings(

    _settings) {
      if (!(0, _utils.isObject)(_settings)) {
        return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));
      }

      if ((0, _utils.hop)(_settings, 'host') && !(0, _utils.isString)(_settings.host)) {
        return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));
      }

      if ((0, _utils.hop)(_settings, 'persistence') && !(0, _utils.isBoolean)(_settings.persistence)) {
        return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));
      }

      if ((0, _utils.hop)(_settings, 'cacheSizeBytes')) {
        if (!(0, _utils.isNumber)(_settings.cacheSizeBytes)) {
          return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));
        }

        if (_settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && _settings.cacheSizeBytes < MIN_CACHE_SIZE) {
          return Promise.reject(new Error("Firestore.settings failed: settings.cacheSizeBytes must be set to " + MIN_CACHE_SIZE + " at least bytes."));
        }
      }

      if ((0, _utils.hop)(_settings, 'ssl') && !(0, _utils.isBoolean)(_settings.ssl)) {
        return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));
      }

      if ((0, _utils.hop)(_settings, 'timestampsInSnapshots') && !(0, _utils.isBoolean)(_settings.timestampsInSnapshots)) {
        return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));
      }

      return (0, _native.getNativeModule)(this).settings(_settings);
    } }, { key: "enablePersistence", value: function enablePersistence()







    {
      console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');
      return Promise.resolve();
    } }, { key: "_onCollectionSyncEvent", value: function _onCollectionSyncEvent(














    event) {
      if (event.error) {
        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onQuerySnapshotError:" + event.listenerId), event);
      } else {
        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onQuerySnapshot:" + event.listenerId), event.querySnapshot);
      }
    } }, { key: "_onDocumentSyncEvent", value: function _onDocumentSyncEvent(








    event) {
      if (event.error) {
        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onDocumentSnapshotError:" + event.listenerId), event);
      } else {
        _events.SharedEventEmitter.emit((0, _events.getAppEventName)(this, "onDocumentSnapshot:" + event.listenerId), event.documentSnapshot);
      }
    } }]);return Firestore;}(_ModuleBase.default);exports.default = Firestore;


var statics = {
  Blob: _Blob.default,
  FieldPath: _FieldPath.default,
  FieldValue: _FieldValue.default,
  GeoPoint: _GeoPoint.default,
  Timestamp: _Timestamp.default,
  CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED,

  enableLogging: function enableLogging(enabled) {

    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');
    this.setLogLevel(enabled ? 'debug' : 'silent');
  },

  setLogLevel: function setLogLevel(logLevel) {
    if (LogLevels.indexOf(logLevel) === -1) {
      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');
    }

    if (_reactNative.NativeModules[MODULE_NAME]) {
      _reactNative.NativeModules[MODULE_NAME].setLogLevel(logLevel);
    }
  } };exports.statics = statics;