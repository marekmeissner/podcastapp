a480953693c2469734c7c5855713bab7
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _ = require("./");
var _AdRequest = _interopRequireDefault(require("./AdRequest"));
var _events = require("../../utils/events");
var _native = require("../../utils/native");
var _utils = require("../../utils");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}
var subscriptions = [];var
RewardedVideo = function () {
  function RewardedVideo(admob, adUnit) {var _this = this;(0, _classCallCheck2.default)(this, RewardedVideo);this.


















    _onRewardedVideoEvent = function (event) {
      var eventType = "rewarded_video:" + _this.adUnit + ":" + event.type;
      var emitData = (0, _extends2.default)({}, event);

      switch (event.type) {
        case 'onAdLoaded':
          _this.loaded = true;
          break;

        case 'onAdFailedToLoad':
          emitData = (0, _utils.nativeToJSError)(event.payload.code, event.payload.message);
          emitData.type = event.type;
          break;

        default:}


      _events.SharedEventEmitter.emit(eventType, emitData);
      _events.SharedEventEmitter.emit("rewarded_video:" + _this.adUnit + ":*", emitData);
    };for (var i = 0, len = subscriptions.length; i < len; i++) {subscriptions[i].remove();}subscriptions = [];this._admob = admob;this.adUnit = adUnit;this.loaded = false;_events.SharedEventEmitter.removeAllListeners("rewarded_video_" + adUnit);_events.SharedEventEmitter.addListener("rewarded_video_" + adUnit, this._onRewardedVideoEvent);}(0, _createClass2.default)(RewardedVideo, [{ key: "loadAd", value: function loadAd(






    request) {
      var adRequest = request;

      if (!adRequest || !Object.keys(adRequest)) {
        adRequest = new _AdRequest.default().addTestDevice().build();
      }

      return (0, _native.getNativeModule)(this._admob).rewardedVideoLoadAd(this.adUnit, adRequest);
    } }, { key: "setCustomData", value: function setCustomData(







    customData) {
      return (0, _native.getNativeModule)(this._admob).rewardedVideoSetCustomData(this.adUnit, customData);
    } }, { key: "isLoaded", value: function isLoaded()






    {
      return this.loaded;
    } }, { key: "show", value: function show()






    {
      if (this.loaded) {
        (0, _native.getNativeModule)(this._admob).rewardedVideoShowAd(this.adUnit);
      }
    } }, { key: "on", value: function on(








    eventType, listenerCb) {
      var types = _objectSpread({}, _.statics.EventTypes, {},
      _.statics.RewardedVideoEventTypes);


      if (!types[eventType]) {
        console.warn("Invalid event type provided, must be one of: " + Object.keys(types).join(', '));
        return null;
      }

      var sub = _events.SharedEventEmitter.addListener("rewarded_video:" + this.adUnit + ":" + eventType, listenerCb);
      subscriptions.push(sub);
      return sub;
    } }]);return RewardedVideo;}();exports.default = RewardedVideo;