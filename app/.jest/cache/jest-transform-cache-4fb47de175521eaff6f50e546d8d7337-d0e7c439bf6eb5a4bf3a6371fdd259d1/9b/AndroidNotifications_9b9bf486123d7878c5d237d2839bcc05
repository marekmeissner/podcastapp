329615959e6ec8fe0a0d877f2e64f9a9
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));



var _reactNative = require("react-native");
var _AndroidChannel = _interopRequireDefault(require("./AndroidChannel"));
var _AndroidChannelGroup = _interopRequireDefault(require("./AndroidChannelGroup"));
var _native = require("../../utils/native");var
AndroidNotifications = function () {
  function AndroidNotifications(notifications) {(0, _classCallCheck2.default)(this, AndroidNotifications);
    this._notifications = notifications;
  }(0, _createClass2.default)(AndroidNotifications, [{ key: "createChannel", value: function createChannel(

    channel) {
      if (_reactNative.Platform.OS === 'android') {
        if (!(channel instanceof _AndroidChannel.default)) {
          throw new Error("AndroidNotifications:createChannel expects an 'AndroidChannel' but got type " + typeof channel);
        }

        return (0, _native.getNativeModule)(this._notifications).createChannel(channel.build());
      }

      return Promise.resolve();
    } }, { key: "createChannelGroup", value: function createChannelGroup(

    channelGroup) {
      if (_reactNative.Platform.OS === 'android') {
        if (!(channelGroup instanceof _AndroidChannelGroup.default)) {
          throw new Error("AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type " + typeof channelGroup);
        }

        return (0, _native.getNativeModule)(this._notifications).createChannelGroup(channelGroup.build());
      }

      return Promise.resolve();
    } }, { key: "createChannelGroups", value: function createChannelGroups(

    channelGroups) {
      if (_reactNative.Platform.OS === 'android') {
        if (!Array.isArray(channelGroups)) {
          throw new Error("AndroidNotifications:createChannelGroups expects an 'Array' but got type " + typeof channelGroups);
        }

        var nativeChannelGroups = [];

        for (var i = 0; i < channelGroups.length; i++) {
          var channelGroup = channelGroups[i];

          if (!(channelGroup instanceof _AndroidChannelGroup.default)) {
            throw new Error("AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type " + typeof channelGroup);
          }

          nativeChannelGroups.push(channelGroup.build());
        }

        return (0, _native.getNativeModule)(this._notifications).createChannelGroups(nativeChannelGroups);
      }

      return Promise.resolve();
    } }, { key: "createChannels", value: function createChannels(

    channels) {
      if (_reactNative.Platform.OS === 'android') {
        if (!Array.isArray(channels)) {
          throw new Error("AndroidNotifications:createChannels expects an 'Array' but got type " + typeof channels);
        }

        var nativeChannels = [];

        for (var i = 0; i < channels.length; i++) {
          var channel = channels[i];

          if (!(channel instanceof _AndroidChannel.default)) {
            throw new Error("AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type " + typeof channel);
          }

          nativeChannels.push(channel.build());
        }

        return (0, _native.getNativeModule)(this._notifications).createChannels(nativeChannels);
      }

      return Promise.resolve();
    } }, { key: "removeDeliveredNotificationsByTag", value: function removeDeliveredNotificationsByTag(

    tag) {
      if (_reactNative.Platform.OS === 'android') {
        if (typeof tag !== 'string') {
          throw new Error("AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type " + typeof tag);
        }

        return (0, _native.getNativeModule)(this._notifications).removeDeliveredNotificationsByTag(tag);
      }

      return Promise.resolve();
    } }, { key: "deleteChannelGroup", value: function deleteChannelGroup(

    groupId) {
      if (_reactNative.Platform.OS === 'android') {
        if (typeof groupId !== 'string') {
          throw new Error("AndroidNotifications:deleteChannelGroup expects an 'string' but got type " + typeof groupId);
        }

        return (0, _native.getNativeModule)(this._notifications).deleteChannelGroup(groupId);
      }

      return Promise.resolve();
    } }, { key: "deleteChannel", value: function deleteChannel(

    channelId) {
      if (_reactNative.Platform.OS === 'android') {
        if (typeof channelId !== 'string') {
          throw new Error("AndroidNotifications:deleteChannel expects an 'string' but got type " + typeof channelId);
        }

        return (0, _native.getNativeModule)(this._notifications).deleteChannel(channelId);
      }

      return Promise.resolve();
    } }, { key: "getChannel", value: function getChannel(

    channelId) {
      if (_reactNative.Platform.OS === 'android') {
        if (typeof channelId !== 'string') {
          throw new Error("AndroidNotifications:getChannel expects an 'string' but got type " + typeof channelId);
        }

        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannel(channelId));
      }

      return Promise.resolve(null);
    } }, { key: "getChannels", value: function getChannels()

    {
      if (_reactNative.Platform.OS === 'android') {
        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannels());
      }

      return Promise.resolve([]);
    } }, { key: "getChannelGroup", value: function getChannelGroup(

    channelGroupId) {
      if (_reactNative.Platform.OS === 'android') {
        if (typeof channelGroupId !== 'string') {
          throw new Error("AndroidNotifications:getChannel expects an 'string' but got type " + typeof channelGroupId);
        }

        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannelGroup(channelGroupId));
      }

      return Promise.resolve(null);
    } }, { key: "getChannelGroups", value: function getChannelGroups()

    {
      if (_reactNative.Platform.OS === 'android') {
        return Promise.resolve((0, _native.getNativeModule)(this._notifications).getChannelGroups());
      }

      return Promise.resolve([]);
    } }]);return AndroidNotifications;}();exports.default = AndroidNotifications;