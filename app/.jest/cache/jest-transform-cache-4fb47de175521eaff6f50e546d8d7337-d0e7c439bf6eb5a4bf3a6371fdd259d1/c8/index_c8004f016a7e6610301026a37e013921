7be951cf620b6e7e6a586af6f08f4923
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _ModuleBase = _interopRequireDefault(require("../../utils/ModuleBase"));
var _native = require("../../utils/native");
var MODULE_NAME = 'RNFirebaseCrashlytics';exports.MODULE_NAME = MODULE_NAME;
var NAMESPACE = 'crashlytics';exports.NAMESPACE = NAMESPACE;var
Crashlytics = function (_ModuleBase) {(0, _inherits2.default)(Crashlytics, _ModuleBase);
  function Crashlytics(app) {(0, _classCallCheck2.default)(this, Crashlytics);return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Crashlytics).call(this,
    app, {
      moduleName: MODULE_NAME,
      hasMultiAppSupport: false,
      hasCustomUrlSupport: false,
      namespace: NAMESPACE }));

  }(0, _createClass2.default)(Crashlytics, [{ key: "crash", value: function crash()





    {
      (0, _native.getNativeModule)(this).crash();
    } }, { key: "log", value: function log(






    message) {
      if (typeof message === 'string') {
        (0, _native.getNativeModule)(this).log(message);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "recordError", value: function recordError(







    code, message) {
      if (typeof code === 'number' && typeof message === 'string') {
        (0, _native.getNativeModule)(this).recordError(code, message);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "recordCustomError", value: function recordCustomError(








    name, message, stack) {
      if (typeof stack === 'undefined') {
        if (typeof name === 'string' && typeof message === 'string') {
          (0, _native.getNativeModule)(this).recordCustomError(name, message, []);
        } else {
          throw new Error('Invalid parameter type!');
        }
      } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {
        var hasKey = true;
        stack.forEach(function (v) {
          if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {
            hasKey = false;
          }
        });

        if (hasKey) {
          (0, _native.getNativeModule)(this).recordCustomError(name, message, stack);
        } else {
          throw new Error('Missing required argument fileName!');
        }
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "setBoolValue", value: function setBoolValue(





    key, value) {
      if (typeof key === 'string' && typeof value === 'boolean') {
        (0, _native.getNativeModule)(this).setBoolValue(key, value);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "setFloatValue", value: function setFloatValue(





    key, value) {
      if (typeof key === 'string' && typeof value === 'number') {
        (0, _native.getNativeModule)(this).setFloatValue(key, value);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "setIntValue", value: function setIntValue(





    key, value) {
      if (typeof key === 'string' && typeof value === 'number') {
        (0, _native.getNativeModule)(this).setIntValue(key, value);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "setStringValue", value: function setStringValue(





    key, value) {
      if (typeof key === 'string' && typeof value === 'string') {
        (0, _native.getNativeModule)(this).setStringValue(key, value);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "setUserIdentifier", value: function setUserIdentifier(





    userId) {
      if (typeof userId === 'string') {
        (0, _native.getNativeModule)(this).setUserIdentifier(userId);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "setUserName", value: function setUserName(





    userName) {
      if (typeof userName === 'string') {
        return (0, _native.getNativeModule)(this).setUserName(userName);
      }

      throw new Error('Invalid parameter type!');
    } }, { key: "setUserEmail", value: function setUserEmail(





    userEmail) {
      if (typeof userEmail === 'string') {
        (0, _native.getNativeModule)(this).setUserEmail(userEmail);
      } else {
        throw new Error('Invalid parameter type!');
      }
    } }, { key: "enableCrashlyticsCollection", value: function enableCrashlyticsCollection()





    {
      (0, _native.getNativeModule)(this).enableCrashlyticsCollection();
    } }]);return Crashlytics;}(_ModuleBase.default);exports.default = Crashlytics;


var statics = {};exports.statics = statics;