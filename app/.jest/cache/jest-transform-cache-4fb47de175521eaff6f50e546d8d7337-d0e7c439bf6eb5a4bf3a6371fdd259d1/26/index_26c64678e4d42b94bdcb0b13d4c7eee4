8c504b873cff3d5d00114db55759704d
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _reactNative = require("react-native");
var _Reference = _interopRequireDefault(require("./Reference"));
var _transaction = _interopRequireDefault(require("./transaction"));
var _ModuleBase = _interopRequireDefault(require("../../utils/ModuleBase"));
var _native = require("../../utils/native");
var _firebase = _interopRequireDefault(require("../core/firebase"));
var NATIVE_EVENTS = ['database_transaction_event'];
var MODULE_NAME = 'RNFirebaseDatabase';exports.MODULE_NAME = MODULE_NAME;
var NAMESPACE = 'database';exports.NAMESPACE = NAMESPACE;var




Database = function (_ModuleBase) {(0, _inherits2.default)(Database, _ModuleBase);
  function Database(appOrCustomUrl, customUrl) {var _this;(0, _classCallCheck2.default)(this, Database);
    var app;
    var url;

    if (typeof appOrCustomUrl === 'string') {
      app = _firebase.default.app();
      url = appOrCustomUrl;
    } else {
      app = appOrCustomUrl;
      url = customUrl || app.options.databaseURL;
    }


    url = url.endsWith('/') ? url : url + "/";
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Database).call(this, app, {
      events: NATIVE_EVENTS,
      moduleName: MODULE_NAME,
      hasMultiAppSupport: true,
      hasCustomUrlSupport: true,
      namespace: NAMESPACE },
    url));
    _this._serverTimeOffset = 0;
    _this._databaseURL = url;
    _this._transactionHandler = new _transaction.default((0, _assertThisInitialized2.default)(_this));

    if (app.options.persistence) {
      (0, _native.getNativeModule)((0, _assertThisInitialized2.default)(_this)).setPersistence(app.options.persistence);
    }





    setTimeout(function () {
      _this._offsetRef = _this.ref('.info/serverTimeOffset');

      _this._offsetRef.on('value', function (snapshot) {
        _this._serverTimeOffset = snapshot.val() || _this._serverTimeOffset;
      });
    }, 1);return _this;
  }(0, _createClass2.default)(Database, [{ key: "getServerTime", value: function getServerTime()






    {
      return new Date(Date.now() + this._serverTimeOffset);
    } }, { key: "goOnline", value: function goOnline()





    {
      (0, _native.getNativeModule)(this).goOnline();
    } }, { key: "goOffline", value: function goOffline()





    {
      (0, _native.getNativeModule)(this).goOffline();
    } }, { key: "ref", value: function ref(







    path) {
      return new _Reference.default(this, path);
    } }, { key: "databaseUrl", get: function get()






    {
      return this._databaseURL;
    } }]);return Database;}(_ModuleBase.default);exports.default = Database;


var statics = {
  ServerValue: _reactNative.NativeModules.RNFirebaseDatabase ? {
    TIMESTAMP: _reactNative.NativeModules.RNFirebaseDatabase.serverValueTimestamp || {
      '.sv': 'timestamp' } } :

  {},

  enableLogging: function enableLogging(enabled) {
    if (_reactNative.NativeModules[MODULE_NAME]) {
      _reactNative.NativeModules[MODULE_NAME].enableLogging(enabled);
    }
  } };exports.statics = statics;