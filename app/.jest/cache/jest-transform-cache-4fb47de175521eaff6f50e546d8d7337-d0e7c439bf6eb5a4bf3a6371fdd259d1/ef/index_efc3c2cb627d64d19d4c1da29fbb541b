ad94a4d8111be433a8958c7b3726c9a1
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.statics = exports.default = exports.NAMESPACE = exports.MODULE_NAME = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));



var _reactNative = require("react-native");
var _reference = _interopRequireDefault(require("./reference"));
var _events = require("../../utils/events");
var _log = require("../../utils/log");
var _utils = require("../../utils");
var _ModuleBase = _interopRequireDefault(require("../../utils/ModuleBase"));
var _native = require("../../utils/native");
var FirebaseStorage = _reactNative.NativeModules.RNFirebaseStorage;
var NATIVE_EVENTS = ['storage_event', 'storage_error'];
var MODULE_NAME = 'RNFirebaseStorage';exports.MODULE_NAME = MODULE_NAME;
var NAMESPACE = 'storage';exports.NAMESPACE = NAMESPACE;var
Storage = function (_ModuleBase) {(0, _inherits2.default)(Storage, _ModuleBase);





  function Storage(app) {var _this;(0, _classCallCheck2.default)(this, Storage);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Storage).call(this, app, {
      events: NATIVE_EVENTS,
      moduleName: MODULE_NAME,
      hasMultiAppSupport: true,
      hasCustomUrlSupport: false,
      namespace: NAMESPACE }));

    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'storage_event'), _this._handleStorageEvent.bind((0, _assertThisInitialized2.default)(_this)));
    _events.SharedEventEmitter.addListener((0, _events.getAppEventName)((0, _assertThisInitialized2.default)(_this), 'storage_error'), _this._handleStorageEvent.bind((0, _assertThisInitialized2.default)(_this)));return _this;
  }(0, _createClass2.default)(Storage, [{ key: "ref", value: function ref(








    path) {
      return new _reference.default(this, path);
    } }, { key: "refFromURL", value: function refFromURL(








    url) {

      return new _reference.default(this, "url::" + url);
    } }, { key: "setMaxOperationRetryTime", value: function setMaxOperationRetryTime(







    time) {
      (0, _native.getNativeModule)(this).setMaxOperationRetryTime(time);
    } }, { key: "setMaxUploadRetryTime", value: function setMaxUploadRetryTime(







    time) {
      (0, _native.getNativeModule)(this).setMaxUploadRetryTime(time);
    } }, { key: "setMaxDownloadRetryTime", value: function setMaxDownloadRetryTime(







    time) {
      (0, _native.getNativeModule)(this).setMaxDownloadRetryTime(time);
    } }, { key: "_getSubEventName", value: function _getSubEventName(





    path, eventName) {
      return (0, _events.getAppEventName)(this, path + "-" + eventName);
    } }, { key: "_handleStorageEvent", value: function _handleStorageEvent(

    event) {var

      path =

      event.path,eventName = event.eventName;
      var body = event.body || {};
      (0, _log.getLogger)(this).debug('_handleStorageEvent: ', path, eventName, body);
      _events.SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);
    } }, { key: "_handleStorageError", value: function _handleStorageError(

    err) {var

      path =

      err.path,eventName = err.eventName;
      var body = err.body || {};
      (0, _log.getLogger)(this).debug('_handleStorageError ->', err);
      _events.SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);
    } }, { key: "_addListener", value: function _addListener(

    path, eventName, cb) {
      _events.SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);
    } }, { key: "_removeListener", value: function _removeListener(

    path, eventName, origCB) {
      _events.SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);
    } }]);return Storage;}(_ModuleBase.default);exports.default = Storage;


var statics = {
  TaskEvent: {
    STATE_CHANGED: 'state_changed' },

  TaskState: {
    RUNNING: 'running',
    PAUSED: 'paused',
    SUCCESS: 'success',
    CANCELLED: 'cancelled',
    ERROR: 'error' },

  Native: FirebaseStorage ? {
    MAIN_BUNDLE_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.MAIN_BUNDLE_PATH),
    CACHES_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.CACHES_DIRECTORY_PATH),
    DOCUMENT_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),
    EXTERNAL_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),
    EXTERNAL_STORAGE_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),
    TEMP_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.TEMP_DIRECTORY_PATH),
    LIBRARY_DIRECTORY_PATH: (0, _utils.stripTrailingSlash)(FirebaseStorage.LIBRARY_DIRECTORY_PATH),
    FILETYPE_REGULAR: (0, _utils.stripTrailingSlash)(FirebaseStorage.FILETYPE_REGULAR),
    FILETYPE_DIRECTORY: (0, _utils.stripTrailingSlash)(FirebaseStorage.FILETYPE_DIRECTORY) } :
  {} };exports.statics = statics;